import numpy as np
from scipy.stats import multivariate_normal
import time
import platform
import threading
import lib.device_model as deviceModel
from lib.data_processor.roles.jy901s_dataProcessor import JY901SDataProcessor
from lib.protocol_resolver.roles.wit_protocol_resolver import WitProtocolResolver
import serial



#############################################

def setConfig(device):
    device.unlock()
    time.sleep(0.1)
    device.writeReg(0x03, 6)
    time.sleep(0.1)
    device.writeReg(0x23, 0)
    time.sleep(0.1)
    device.writeReg(0x24, 0)
    time.sleep(0.1)
    device.save()

def AccelerationCalibration(device):
    device.AccelerationCalibration()
    print("Acceleration Calibration made")

def onUpdate(deviceModel):
    return [deviceModel.getDeviceData("accX"), deviceModel.getDeviceData("accY"), deviceModel.getDeviceData("accZ"), deviceModel.getDeviceData("gyroX"), deviceModel.getDeviceData("gyroY"), deviceModel.getDeviceData("gyroZ")]

def LoopReadThread(device, stop_event):
    while not stop_event.is_set():
        try:
            if device.serialPort and device.serialPort.is_open:
                device.readReg(0x30, 41)
            else:
                print("Serial port not open")
                break
        except serial.SerialException as e:
            print(f"Serial exception: {e}")
            break
        except Exception as e:
            print(f"Exception: {e}")
            break
        time.sleep(0.1)

def multivariate_gaussian(dataset, mu, sigma):
    p = multivariate_normal(mean=mu, cov=sigma)
    return p.logpdf(dataset)

def estimate_gaussian(dataset):
    mu = np.mean(dataset, axis=0)
    sigma = np.cov(dataset.T)
    return mu, sigma

data = np.genfromtxt('/home/alvaro/TFG/V2_acc/medidas/ventilador_normal.txt', delimiter='\t', skip_header=1)
clean_data = data[:, 1:]
mu, sigma = estimate_gaussian(clean_data)
ep = -35

def read_accelerometer(device, stop_event):
    t = threading.Thread(target=LoopReadThread, args=(device, stop_event))
    t.start()
    time.sleep(1)  # Ensure the thread has started and device is reading
    readings = onUpdate(device)
    stop_event.set()
    t.join()
    return readings

anomalia = False
deviceIsClosed = True
stop_event = threading.Event()

while True:
    if deviceIsClosed:
        device = deviceModel.DeviceModel(
            "JY901",
            WitProtocolResolver(),
            JY901SDataProcessor(),
            "51_0"
        )
        if platform.system().lower() == 'linux':
            device.serialConfig.portName = "/dev/ttyUSB0"
        else:
            device.serialConfig.portName = "COM39"
        device.serialConfig.baud = 9600

        try:
            device.openDevice()
            AccelerationCalibration(device)
            input()
            deviceIsClosed = False
        except serial.SerialException as e:
            print(f"Error opening serial port: {e}")
            continue  # Retry opening the device in the next iteration

    try:
        acc_readings = read_accelerometer(device, stop_event)
        p = multivariate_gaussian(acc_readings, mu, sigma)
        print(acc_readings, p)
        if p <= ep:
            print("ANOMALIAAAA")
            anomalia = True
            #device.closeDevice()
            #deviceIsClosed = True
        else:
            print("no anomalia")
    except serial.SerialException as e:
        print(f"Serial exception during read: {e}")
        if device.serialPort and device.serialPort.is_open:
            device.closeDevice()
        deviceIsClosed = True
    except Exception as e:
        print(f"Unexpected exception: {e}")
        if device.serialPort and device.serialPort.is_open:
            device.closeDevice()
        deviceIsClosed = True

    time.sleep(0.5)
